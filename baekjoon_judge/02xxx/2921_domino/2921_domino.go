package main

import (
	"fmt"
	"math"
)

func main() {
	var N int
	fmt.Scan(&N)
	sum := 0
	// O(N^2)
	// for i := 0; i <= N; i++ {
	// 	for j := i; j <= N; j++ {
	// 		sum += i + j
	// 	}
	// }

	// O(N)
	// for i := 0; i <= N; i++ {
	// 	sum += ((N-i)+1)*i + N*(N+1)/2 - (i-1)*i/2
	// }

	// O(1)
	N3 := math.Pow(float64(N), float64(3))
	N2 := 3 * math.Pow(float64(N), float64(2))
	sum = int(N3+N2+float64(2*N)) / 2

	fmt.Printf("%d\n", sum)
}

/*
00 0
01 1
02 2

11 1+1
12 2+1

22 2+2


00 0
01 1
02 2
03 3

11 1+1
12 2+1
13 3+1

22 2+2
23 3+2

33 3+3

첫자리의 숫자를 i라고 하자.
i의 갯수는 (N-i)+1
각 i에서 나오는 수의 합은 i~N까지의 합 = N(N+1)/2-(i-1)i/2
그럼 i 하나의 합은 아래와 같은 식이 된다.
((N-i)+1)*i + N(N+1)/2-(i-1)i/2

이걸 풀면? [s는 i 하나에 대한 합이라고 한다.]
s = (N-i)*i + i + (N^2+N-i^2+i)/2
2*s = 2*(N-i)*i + 2*i + (N^2+N-i^2+i)
2*s = 2*N*i - 2*i^2 + 2*i + N^2 + N - i^2 + i
2*s = 2*N*i - 3*i^2 + 3*i + N^2 + N

sum(2*s) = sum(2*N*i - 3*i^2 + 3*i + N^2 + N) [i=0~N]

sum(2*N*i+3*i) = (2*N+3)*(0+1+...+N) = (2*N+3)*N*(N+1)/2 = (2*N^2 + 3*N)*(N+1)/2 = (2*N^3 + 3*N^2 + 2*N^2 + 3*N)/2 = (2*N^3 + 5*N^2 + 3*N) / 2
sum(-3*i^2) = -3*(0^2+1^2+...+N^2) = -3*N*(N+1)*(2*N+1)/6 = -1*N*(N+1)*(2*N+1)/2 = -(N^2+N)(2*N+1)/2 = -(2*N^3 + 2*N^2 + N^2 + N) / 2 = -(2*N^3+3*N^2+N) / 2
sum(N^2+N) = (N+1)*(N^2+N) = N^3 + N^2 + N^2 + N = N^3 + 2*N^2 + N

(2*N^3 + 5*N^2 + 3*N)/2 -(2*N^3 + 3*N^2 + N)/2 = N^2 + N
N^3 + 2*N^2 + N + N^2 + N = N^3 + 3*N^2 + 2*N

sum(2*s) = N^3 + 3*N^2 + 2*N
sum(s) = (N^3+3*N^2+2N)/2
*/
